---
import BaseLayout from '../layouts/BaseLayout.astro';
import { getEntry } from 'astro:content';

const { data } = await getEntry('projects', 'agora-21');
const caseStudy = data.caseStudy ?? {};
const navLinks = [
  { href: '/', label: 'Home' },
  { href: '#app-content', label: 'Experience' }
];
---
<BaseLayout
  title={`${caseStudy.hero?.title ?? data.title} | Jacob Meyerkopf`}
  description={caseStudy.hero?.subtitle ?? data.summary}
  mainClass="bg-[#f4f6f8]"
  navLinks={navLinks}
>
  <Fragment slot="head">
    <style>
      :root {
        --primary-color: #005a9c;
        --secondary-color: #1a73e8;
        --accent-color: #f59e0b;
        --background-color: #f4f6f8;
        --text-color: #333;
        --card-bg: #ffffff;
        --border-color: #e0e0e0;
        --success-color: #2e7d32;
        --warning-color: #ed6c02;
        --danger-color: #c62828;
        --font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif;
      }

      #main {
        background-color: var(--background-color);
      }

      body.agora-app {
        font-family: var(--font-family);
        margin: 0;
        background-color: var(--background-color);
        color: var(--text-color);
      }

      .agora-shell {
        display: flex;
        flex-direction: column;
        min-height: 100vh;
      }

      .agora-shell header {
        background-color: var(--primary-color);
        color: white;
        padding: 1rem 2rem;
        text-align: center;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
      }

      .agora-shell header h1 {
        margin: 0;
        font-size: 1.8rem;
      }

      .agora-container {
        display: flex;
        flex: 1;
      }

      .agora-container nav {
        width: 240px;
        background-color: var(--card-bg);
        padding: 1rem;
        border-right: 1px solid var(--border-color);
        flex-shrink: 0;
      }

      .agora-container nav ul {
        list-style: none;
        padding: 0;
        margin: 0;
      }

      .agora-container nav li a {
        display: flex;
        align-items: center;
        gap: 0.8rem;
        padding: 0.8rem 1rem;
        text-decoration: none;
        color: var(--primary-color);
        border-radius: 6px;
        margin-bottom: 0.5rem;
        transition: background-color 0.2s ease, color 0.2s ease;
        font-weight: 500;
      }

      .agora-container nav li a:hover,
      .agora-container nav li a.active {
        background-color: var(--secondary-color);
        color: white;
      }

      #app-content {
        flex: 1;
        padding: 2rem;
        overflow-y: auto;
      }

      .page-header {
        border-bottom: 2px solid var(--secondary-color);
        padding-bottom: 0.5rem;
        margin-bottom: 1.5rem;
      }

      .page-header h2 {
        margin: 0;
        color: var(--primary-color);
      }

      .card {
        background-color: var(--card-bg);
        border: 1px solid var(--border-color);
        border-radius: 8px;
        padding: 1.5rem;
        margin-bottom: 1.5rem;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
      }

      .button {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        background-color: var(--secondary-color);
        color: white;
        border: none;
        padding: 0.7rem 1.2rem;
        border-radius: 6px;
        cursor: pointer;
        font-size: 1rem;
        font-weight: 500;
        transition: all 0.2s ease;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
      }

      .button:hover {
        background-color: #155ab6;
        transform: translateY(-1px);
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
      }

      .grid-2 {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
      }

      .action-item {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 0.8rem 0;
        border-bottom: 1px solid var(--border-color);
      }

      .action-item:last-child {
        border-bottom: none;
      }

      .icon-wrapper {
        flex-shrink: 0;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: #e3f2fd;
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--primary-color);
      }

      .learning-resource-card {
        display: flex;
        align-items: center;
        gap: 1rem;
        padding: 1rem;
        border: 1px solid var(--border-color);
        border-radius: 8px;
        margin-bottom: 1rem;
      }

      .tabs {
        display: flex;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 1rem;
      }

      .tab-link {
        padding: 0.8rem 1.2rem;
        cursor: pointer;
        border: none;
        background: none;
        font-size: 1rem;
        border-bottom: 3px solid transparent;
      }

      .tab-link.active {
        border-bottom: 3px solid var(--secondary-color);
        font-weight: bold;
        color: var(--secondary-color);
      }

      .tab-content {
        display: none;
      }

      .tab-content.active {
        display: block;
      }

      .progress-bar {
        width: 100%;
        background-color: #e0e0e0;
        border-radius: 4px;
        overflow: hidden;
      }

      .progress-bar-fill {
        height: 20px;
        background-color: var(--success-color);
        text-align: right;
        color: white;
        padding-right: 5px;
        box-sizing: border-box;
        line-height: 20px;
        transition: width 0.5s ease-in-out;
      }

      .badge-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 1rem;
      }

      .badge {
        text-align: center;
        width: 100px;
      }

      .badge .badge-icon {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background-color: #e0e0e0;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto 0.5rem;
        font-size: 2rem;
        color: #666;
      }

      .badge.unlocked .badge-icon {
        background-color: var(--accent-color);
        color: white;
      }

      .badge .badge-name {
        font-weight: 500;
        font-size: 0.9rem;
      }

      .filter-controls {
        margin-bottom: 1rem;
        display: flex;
        gap: 1rem;
      }

      .funding-status-tag {
        font-weight: bold;
        padding: 0.3rem 0.8rem;
        border-radius: 6px;
        margin-top: 0.5rem;
        display: inline-block;
      }

      .funding-status-in {
        background-color: #e8f5e9;
        color: var(--success-color);
        border: 1px solid var(--success-color);
      }

      .funding-status-out {
        background-color: #fff3e0;
        color: var(--warning-color);
        border: 1px solid var(--warning-color);
      }

      .toast {
        position: fixed;
        bottom: 20px;
        right: 20px;
        background-color: rgba(0, 0, 0, 0.85);
        color: white;
        padding: 0.75rem 1.5rem;
        border-radius: 999px;
        opacity: 0;
        transform: translateY(20px);
        transition: all 0.3s ease;
        z-index: 9999;
      }

      .toast.show {
        opacity: 1;
        transform: translateY(0);
      }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  </Fragment>

  <div class="agora-shell">
    <header>
      <h1>{caseStudy.hero?.title ?? data.title}</h1>
      <p>{caseStudy.hero?.subtitle ?? data.summary}</p>
      {caseStudy.overview && <p class="mt-2 text-sm text-blue-100">{caseStudy.overview}</p>}
    </header>
    <div class="agora-container">
      <nav>
        <ul id="main-nav"></ul>
      </nav>
      <main id="app-content"></main>
    </div>
    <footer class="bg-white py-4 text-center text-sm text-gray-500">
      Agora 21 is a conceptual prototype for a non-profit, public-interest social platform.
    </footer>
  </div>

  <script>
    document.body.classList.add('agora-app');
  </script>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const TOTAL_BUDGET = 200000;
      const mockData = {
        deliberations: [
          {
            id: 1,
            title: 'Community Greenspace Initiative',
            description: 'Proposal to convert the vacant lot on Elm Street into a community park and garden.',
            status: 'Open for Comment',
            learningMaterials: [
              { type: 'Document', title: 'City Zoning Report for Elm St. Lot', url: '#' },
              { type: 'Data', title: 'Cost-Benefit Analysis of Urban Parks', url: '#' },
              { type: 'Video', title: 'Testimonials from other cities with community gardens', url: '#' }
            ],
            comments: [
              { author: 'Jane D.', text: 'I love this idea! A park would be a wonderful addition for the children in our community.', factCheck: null },
              {
                author: 'Robert P.',
                text: 'A great concept, but we need to consider the long-term maintenance costs. The city\'s budget is already stretched thin.',
                factCheck: "The Parks Department estimates annual maintenance at $15,000. The proposal includes a volunteer-led 'Friends of the Park' group to offset costs."
              }
            ]
          }
        ],
        budgetProposals: [
          { id: 2, title: 'Playground Renovation at City Park', cost: 150000, votes: 258 },
          { id: 3, title: 'Crosswalk Safety Initiative', cost: 85000, votes: 197 },
          { id: 1, title: 'Library Technology Upgrade', cost: 50000, votes: 124 }
        ],
        localIssues: [
          { id: 1, title: 'Pothole', location: 'Main St & 4th Ave', status: 'Reported', assignedDept: 'Public Works', eta: '3 days' },
          { id: 2, title: 'Broken Streetlight', location: '125 Oak St', status: 'In Progress', assignedDept: 'Public Works', eta: '1 day' },
          { id: 3, title: 'Graffiti on Park Bench', location: 'City Park', status: 'Resolved', assignedDept: 'Parks & Rec', eta: 'N/A' }
        ],
        communityGroups: [
          { name: 'Downtown Neighborhood Association', mission: 'Advocating for residents and businesses in the downtown core.', category: 'Neighborhood' },
          { name: 'Friends of City Park', mission: 'Volunteer group dedicated to the beautification and maintenance of our central park.', category: 'Environment' },
          { name: 'Code for Our City Brigade', mission: 'Tech volunteers using their skills to improve local government services.', category: 'Technology' }
        ],
        publicMeetings: [
          { name: 'City Council Meeting', date: 'September 2, 7:00 PM', location: 'City Hall' },
          { name: 'School Board Meeting', date: 'September 9, 6:30 PM', location: 'Central High School' }
        ],
        userProfile: {
          name: 'John Smith',
          timeline: [
            { date: 'August 20, 2025', action: 'Reported a broken streetlight', details: 'Status: Resolved', icon: 'localIssues' },
            { date: 'August 15, 2025', action: 'Your vote helped fund the Playground Renovation', details: 'Participatory Budgeting', icon: 'budgeting' },
            { date: 'August 5, 2025', action: "Joined the 'Greenspace Initiative' deliberation", details: 'Contributed 1 comment', icon: 'deliberations' }
          ],
          badges: [
            { name: 'First Vote', icon: '🗳️', unlocked: true },
            { name: 'Issue Spotter', icon: '🎯', unlocked: true },
            { name: 'Community Builder', icon: '💬', unlocked: false },
            { name: 'Civic Leader', icon: '⭐', unlocked: false }
          ]
        },
        actionItems: [
          { title: 'Budget voting ends in 3 days!', subtitle: 'Cast your vote before the deadline.', page: 'budgeting', icon: 'budgeting' },
          { title: 'New Deliberation: Park Zoning', subtitle: 'The learning phase is now open.', page: 'deliberations', icon: 'deliberations' }
        ],
        communityStats: { issuesResolved: 15, budgetAllocated: 200000, totalBudget: TOTAL_BUDGET },
        mediaLiteracyTips: [
          'Check the source! Is it a reputable news organization or a personal blog?',
          'Beware of emotional manipulation. Articles with sensationalist headlines are often designed to provoke a reaction, not to inform.',
          'Practice lateral reading. When you encounter a new source or claim, open other tabs and search for what other trusted sources are saying about it.'
        ]
      };

      const icons = {
        dashboard: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7m-9 2v8m-4 0h8"/></svg>',
        deliberations: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M21 12.5a8.38 8.38 0 01-.9 3.8 8.5 8.5 0 01-7.6 4.7h-1A8.5 8.5 0 013 12.5V12a9 9 0 0118 0z"/></svg>',
        budgeting: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V6m0 0V4m0 2H9m3 0h3m2 12V6a2 2 0 00-2-2H8a2 2 0 00-2 2v12a2 2 0 002 2h7a2 2 0 002-2z"/></svg>',
        localIssues: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 11c0 3.866-3.582 7-8 7a8 8 0 0116 0c-4.418 0-8-3.134-8-7z"/></svg>',
        communityHub: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8h2a2 2 0 012 2v6a2 2 0 01-2 2h-2v4l-4-4H9a2 2 0 01-2-2V6a2 2 0 012-2h6a2 2 0 012 2v2z"/></svg>',
        mediaLiteracy: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h6m-6 4h6m-6 4h6"/></svg>',
        profile: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0z"/><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"/></svg>',
        document: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"/></svg>',
        data: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"/></svg>',
        video: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/></svg>',
        plus: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"/></svg>',
        reported: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 21v-4m0 0V5a2 2 0 012-2h6.5l1 1H21l-3 6 3 6H5a2 2 0 00-2 2zm0 0h7"/></svg>',
        inProgress: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>',
        resolved: '<svg class="icon" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/></svg>'
      };

      const navItems = [
        { page: 'dashboard', label: 'Dashboard' },
        { page: 'deliberations', label: 'Deliberation Hub' },
        { page: 'budgeting', label: 'Participatory Budgeting' },
        { page: 'localIssues', label: 'Local Issues' },
        { page: 'communityHub', label: 'Community Hub' },
        { page: 'mediaLiteracy', label: 'Media Literacy Center' },
        { page: 'profile', label: 'My Profile' }
      ];

      const appContent = document.getElementById('app-content');
      const mainNav = document.getElementById('main-nav');
      let budgetChart = null;

      function init() {
        mainNav.innerHTML = navItems
          .map((item) => `<li><a href="#" class="nav-link" data-page="${item.page}">${icons[item.page]}<span>${item.label}</span></a></li>`)
          .join('');
        mainNav.querySelectorAll('.nav-link').forEach((link) =>
          link.addEventListener('click', (event) => {
            event.preventDefault();
            navigateTo(event.currentTarget.dataset.page);
          })
        );
        navigateTo('dashboard');
      }

      function navigateTo(page) {
        mainNav.querySelectorAll('.nav-link').forEach((link) => link.classList.toggle('active', link.dataset.page === page));
        appContent.innerHTML = '';
        if (budgetChart) {
          budgetChart.destroy();
          budgetChart = null;
        }
        const renderFunction = window.agoraApp.renderers[page];
        if (renderFunction) renderFunction();
      }

      function updateBudgetingUI() {
        const proposalsList = document.getElementById('proposals-list');
        if (!proposalsList) return;

        const sortedProposals = [...mockData.budgetProposals].sort((a, b) => b.votes - a.votes);
        let budgetRemaining = TOTAL_BUDGET;
        const totalVotes = mockData.budgetProposals.reduce((sum, p) => sum + p.votes, 0);

        proposalsList.innerHTML = sortedProposals
          .map((p) => {
            let fundingStatus = '';
            if (budgetRemaining >= p.cost) {
              fundingStatus = '<div class="funding-status-tag funding-status-in">In Funding Zone</div>';
              budgetRemaining -= p.cost;
            } else {
              fundingStatus = '<div class="funding-status-tag funding-status-out">Below Funding Line</div>';
            }

            return `
              <div class="card" data-proposal-id="${p.id}">
                <h3>${p.title}</h3>
                ${fundingStatus}
                <p style="margin-top: 1rem;"><strong>Cost:</strong> $${p.cost.toLocaleString()}</p>
                <p><strong>Votes:</strong> <span class="vote-count">${p.votes.toLocaleString()}</span></p>
                <div class="progress-bar" title="${totalVotes > 0 ? ((p.votes / totalVotes) * 100).toFixed(1) : '0'}% of total votes">
                  <div class="progress-bar-fill" style="width: ${totalVotes > 0 ? (p.votes / totalVotes) * 100 : 0}%;"></div>
                </div><br>
                <button class="button" onclick="window.agoraApp.voteForProposal(${p.id})">Vote for this Project</button>
              </div>`;
          })
          .join('');

        const ctx = document.getElementById('budgetChartCanvas')?.getContext('2d');
        if (ctx) {
          if (budgetChart) budgetChart.destroy();
          budgetChart = new Chart(ctx, {
            type: 'doughnut',
            data: {
              labels: mockData.budgetProposals.map((p) => p.title),
              datasets: [
                {
                  data: mockData.budgetProposals.map((p) => p.votes),
                  backgroundColor: ['#005a9c', '#1a73e8', '#f59e0b'],
                  hoverOffset: 4
                }
              ]
            },
            options: { responsive: true, maintainAspectRatio: true }
          });
        }
      }

      function voteForProposal(id) {
        const proposal = mockData.budgetProposals.find((p) => p.id === id);
        if (proposal) {
          proposal.votes++;
          updateBudgetingUI();
        }
      }

      function openTab(evt, tabName, isButtonClick = false) {
        let targetElement = evt.currentTarget;
        if (isButtonClick) {
          const buttonParent = targetElement.parentElement;
          const tabsContainer = buttonParent.previousElementSibling;
          targetElement = tabsContainer.querySelector(`[onclick*="${tabName}"]`);
        }
        const card = targetElement.closest('.card');
        card.querySelectorAll('.tab-content').forEach((tc) => tc.classList.remove('active'));
        card.querySelectorAll('.tab-link').forEach((tl) => tl.classList.remove('active'));
        document.getElementById(tabName)?.classList.add('active');
        card.querySelector(`[onclick*="${tabName}"]`)?.classList.add('active');
      }

      function filterGroups(category) {
        const container = document.getElementById('groups-container');
        container?.querySelectorAll('.card').forEach((card) => {
          if (category === 'all' || card.dataset.category === category) {
            card.style.display = 'block';
          } else {
            card.style.display = 'none';
          }
        });
      }

      function showToast(message) {
        const toast = document.createElement('div');
        toast.className = 'toast';
        toast.textContent = message;
        document.body.appendChild(toast);
        setTimeout(() => toast.classList.add('show'), 10);
        setTimeout(() => {
          toast.classList.remove('show');
          toast.addEventListener('transitionend', () => toast.remove());
        }, 3000);
      }

      const renderers = {
        dashboard: () => {
          const stats = mockData.communityStats;
          appContent.innerHTML = `
            <div class="page-header"><h2>Dashboard</h2></div>
            <div class="card">
              <h3>Welcome, ${mockData.userProfile.name}</h3>
              <p>This is your central hub for civic engagement. Here, your voice contributes to meaningful change in our community.</p>
            </div>
            <div class="grid-2">
              <div>
                <div class="card">
                  <h3>Action Items</h3>
                  ${mockData.actionItems
                    .map(
                      (item) => `
                        <a href="#" onclick="window.agoraApp.navigateTo('${item.page}')" style="text-decoration:none; color: inherit;">
                          <div class="action-item">
                            <div class="icon-wrapper">${icons[item.icon]}</div>
                            <div class="action-text">
                              <strong>${item.title}</strong>
                              <span>${item.subtitle}</span>
                            </div>
                          </div>
                        </a>`
                    )
                    .join('')}
                </div>
              </div>
              <div>
                <div class="card">
                  <h3>Community Stats</h3>
                  <p><strong>Issues Resolved This Month:</strong> ${stats.issuesResolved}</p>
                  <p><strong>Budget Allocated by Community:</strong> $${stats.budgetAllocated.toLocaleString()} / $${stats.totalBudget.toLocaleString()}</p>
                </div>
              </div>
            </div>`;
        },
        deliberations: () => {
          const resourceIcons = { Document: icons.document, Data: icons.data, Video: icons.video };
          appContent.innerHTML = `
            <div class="page-header"><h2>Deliberation Hub</h2></div>
            ${mockData.deliberations
              .map(
                (d) => `
                  <div class="card">
                    <h3>${d.title}</h3><p>${d.description}</p>
                    <div class="tabs">
                      <button class="tab-link active" onclick="window.agoraApp.openTab(event, 'learning-${d.id}')">Learning Phase</button>
                      <button class="tab-link" onclick="window.agoraApp.openTab(event, 'discussion-${d.id}')">Discussion</button>
                    </div>
                    <div id="learning-${d.id}" class="tab-content active">
                      <h4>Background Materials</h4>
                      <p><em>Reviewing these materials is encouraged to foster a well-informed and constructive discussion.</em></p>
                      ${d.learningMaterials
                        .map(
                          (m) => `
                            <div class="learning-resource-card">
                              <div class="icon-wrapper">${resourceIcons[m.type]}</div>
                              <div><a href="${m.url}" target="_blank">${m.title}</a></div>
                            </div>`
                        )
                        .join('')}
                      <br>
                      <button class="button" onclick="window.agoraApp.openTab(event, 'discussion-${d.id}', true)">I'm ready to discuss</button>
                    </div>
                    <div id="discussion-${d.id}" class="tab-content">
                      <h4>Comments</h4>
                      ${d.comments
                        .map(
                          (c) => `
                            <div class="comment" style="border-left: 3px solid #e0e0e0; padding-left: 1rem; margin-bottom: 1rem;">
                              <p style="font-weight:bold;">${c.author}</p>
                              <p>${c.text}</p>
                              ${
                                c.factCheck
                                  ? `<div style="background-color: #fffbe6; border: 1px solid #ffe58f; border-radius: 4px; padding: 0.5rem; margin-top: 0.5rem; font-size: 0.9rem;"><strong>AI Fact-Check:</strong> ${c.factCheck}</div>`
                                  : ''
                              }
                            </div>`
                        )
                        .join('')}
                      <div class="form-group" style="margin-bottom: 1rem;"><textarea style="width: 100%; padding:0.7rem; border: 1px solid #e0e0e0; border-radius: 6px; box-sizing: border-box;" placeholder="Add a constructive comment..."></textarea></div>
                      <button class="button" onclick="window.agoraApp.showToast('Comment submitted!')">Submit Comment</button>
                    </div>
                  </div>`
              )
              .join('')}`;
        },
        budgeting: () => {
          appContent.innerHTML = `
            <div class="page-header"><h2>Participatory Budgeting</h2></div>
            <div class="card">
              <h3>How It Works</h3>
              <p>Vote for your favorite projects! The total available budget is <strong>$${TOTAL_BUDGET.toLocaleString()}</strong>. At the end of the voting period, the most popular projects will be funded in order of votes until the budget is spent.</p>
            </div>
            <div class="card">
              <h3>Vote Distribution</h3>
              <div style="max-width: 400px; margin: auto;"><canvas id="budgetChartCanvas"></canvas></div>
            </div>
            <div id="proposals-list"></div>`;

          updateBudgetingUI();
        },
        localIssues: () => {
          const statusIcons = { Reported: icons.reported, 'In Progress': icons.inProgress, Resolved: icons.resolved };
          appContent.innerHTML = `
            <div class="page-header"><h2>Local Issue Tracker</h2></div>
            <div class="card">
              <h3>Report a New Issue</h3>
              <div class="form-group" style="margin-bottom: 1rem;"><label style="display: block; margin-bottom: 0.5rem;">Issue Title</label><input type="text" style="width: 100%; padding: 0.6rem; border: 1px solid var(--border-color); border-radius: 6px;" placeholder="Describe the issue..." /></div>
              <div class="form-group" style="margin-bottom: 1rem;"><label style="display: block; margin-bottom: 0.5rem;">Location</label><input type="text" style="width: 100%; padding: 0.6rem; border: 1px solid var(--border-color); border-radius: 6px;" placeholder="Where is it located?" /></div>
              <button class="button" onclick="window.agoraApp.showToast('Issue reported successfully!')">${icons.plus} Submit Report</button>
            </div>
            <div class="card">
              <h3>Current Issues</h3>
              ${mockData.localIssues
                .map(
                  (issue) => `
                    <div class="action-item" style="align-items: flex-start;">
                      <div class="icon-wrapper">${statusIcons[issue.status]}</div>
                      <div>
                        <strong>${issue.title}</strong>
                        <p style="margin: 0.2rem 0;">${issue.location}</p>
                        <span class="status-tag ${
                          issue.status === 'Reported' ? 'status-reported' : issue.status === 'In Progress' ? 'status-in-progress' : 'status-resolved'
                        }">${issue.status}</span>
                        <div style="font-size: 0.85rem; color: #555; margin-top: 0.3rem;">Assigned: ${issue.assignedDept} • ETA: ${issue.eta}</div>
                      </div>
                    </div>`
                )
                .join('')}
            </div>`;
        },
        communityHub: () => {
          appContent.innerHTML = `
            <div class="page-header"><h2>Community Hub</h2></div>
            <div class="card">
              <h3>Explore Community Groups</h3>
              <div class="filter-controls">
                <label for="group-filter">Filter by Category:</label>
                <select id="group-filter" onchange="window.agoraApp.filterGroups(this.value)" style="padding: 0.5rem; border-radius: 6px; border: 1px solid var(--border-color);">
                  <option value="all">All</option>
                  <option value="Neighborhood">Neighborhood</option>
                  <option value="Environment">Environment</option>
                  <option value="Technology">Technology</option>
                </select>
              </div>
              <div id="groups-container">
                ${mockData.communityGroups
                  .map(
                    (group) => `
                      <div class="card" data-category="${group.category}" style="margin-bottom: 1rem;">
                        <h3>${group.name}</h3>
                        <p>${group.mission}</p>
                        <button class="button" style="margin-top: 0.5rem;">Connect</button>
                      </div>`
                  )
                  .join('')}
              </div>
            </div>
            <div class="card">
              <h3>Upcoming Meetings</h3>
              <ul style="list-style: disc; padding-left: 1.5rem;">
                ${mockData.publicMeetings.map((meeting) => `<li><strong>${meeting.name}</strong> — ${meeting.date} at ${meeting.location}</li>`).join('')}
              </ul>
            </div>`;
        },
        mediaLiteracy: () => {
          appContent.innerHTML = `
            <div class="page-header"><h2>Media Literacy Center</h2></div>
            <div class="card">
              <h3>Tips for Navigating Information</h3>
              ${mockData.mediaLiteracyTips
                .map((tip) => `<div class="tip-card" style="margin-bottom: 1rem; border-left: 5px solid var(--secondary-color); padding: 1rem; background-color: #e3f2fd;">${tip}</div>`)
                .join('')}
            </div>
          `;
        },
        profile: () => {
          const profile = mockData.userProfile;
          appContent.innerHTML = `
            <div class="page-header"><h2>My Profile</h2></div>
            <div class="grid-2">
              <div>
                <div class="card">
                  <h3>Recent Activity</h3>
                  <ul class="timeline" style="list-style: none; padding: 0;">
                    ${profile.timeline
                      .map(
                        (entry) => `
                          <li class="timeline-item" style="display: flex; gap: 1rem; padding-bottom: 1.5rem; border-left: 2px solid var(--border-color); position: relative;">
                            <div class="timeline-icon" style="position: absolute; left: -17px; top: 0; width: 32px; height: 32px; border-radius: 50%; background-color: var(--card-bg); border: 2px solid var(--border-color); display: flex; align-items: center; justify-content: center; color: var(--primary-color);">${icons[entry.icon]}</div>
                            <div class="timeline-content" style="padding-left: 1rem;">
                              <div class="date" style="font-size: 0.9rem; color: #666; margin-bottom: 0.2rem;">${entry.date}</div>
                              <strong>${entry.action}</strong>
                              <p style="margin: 0.2rem 0;">${entry.details}</p>
                            </div>
                          </li>`
                      )
                      .join('')}
                  </ul>
                </div>
              </div>
              <div>
                <div class="card">
                  <h3>${profile.name}</h3>
                  <p>Here is a summary of your contributions to our community. Thank you for your engagement!</p>
                </div>
                <div class="card">
                  <h3>My Achievements</h3>
                  <div class="badge-grid">
                    ${profile.badges
                      .map(
                        (badge) => `
                          <div class="badge ${badge.unlocked ? 'unlocked' : ''}">
                            <div class="badge-icon">${badge.icon}</div>
                            <div class="badge-name">${badge.name}</div>
                          </div>`
                      )
                      .join('')}
                  </div>
                </div>
              </div>
            </div>`;
        }
      };

      window.agoraApp = { navigateTo, voteForProposal, openTab, filterGroups, renderers, showToast };
      init();
    });
  </script>
</BaseLayout>
