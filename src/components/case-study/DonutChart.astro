---
const { data } = Astro.props;
const total = (data?.values ?? []).reduce((sum, value) => sum + value, 0);
const segments = (data?.values ?? []).map((value, index) => ({
  value,
  label: data.labels?.[index] ?? `Segment ${index + 1}`
}));
const palette = data?.colors ?? ['#0ea5e9', '#fbbf24', '#22c55e', '#f97316'];
let gradient = 'conic-gradient(';
let cumulative = 0;
segments.forEach((segment, index) => {
  const start = (cumulative / total) * 360;
  cumulative += segment.value;
  const end = (cumulative / total) * 360;
  gradient += `${palette[index % palette.length]} ${start}deg ${end}deg`;
  if (index < segments.length - 1) {
    gradient += ', ';
  }
});
gradient += ')';
---
{data && (
  <div class="mt-12 flex flex-col items-center gap-6">
    <div
      class="relative h-56 w-56 rounded-full"
      style={`background:${gradient};`}
    >
      <div class="absolute inset-10 rounded-full bg-slate-100 shadow-inner dark:bg-slate-900"></div>
      <div class="absolute inset-1/2 -translate-x-1/2 -translate-y-1/2 text-center">
        <p class="text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-300">{data.label}</p>
        <p class="text-2xl font-bold text-slate-900 dark:text-white">{data.totalLabel ?? total}</p>
      </div>
    </div>
    <ul class="space-y-2">
      {segments.map((segment, index) => (
          <li class="flex items-center gap-3 text-sm text-slate-600 dark:text-slate-300">
            <span
              class="h-3 w-3 rounded-full"
              style={`background:${palette[index % palette.length]};`}
            ></span>
            <span class="font-medium text-slate-700 dark:text-slate-200">{segment.label}</span>
            <span class="text-slate-500 dark:text-slate-400">{segment.value}</span>
          </li>
      ))}
    </ul>
  </div>
)}
